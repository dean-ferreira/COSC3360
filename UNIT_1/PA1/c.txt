#include "stdio.h""unistd.h," 
main(int argc, string argv) Integer num of symbols = 5; integer * symbols1 = (int *) malloc((sizeof (int)) * num of symbols); double * probabilities1 = (double *) malloc((sizeof (double) * num of symbols); char inputfile[] = "A B C D E 0.3 0.25 0.2 0.15 0.1"; int I = 0; while I 2) /* Reading symbols */ for I = 0; I num of symbols; i++) { /* symbol A */ symbols1 I = 'A' ; } /* symbol B */ symbols1 [1] = 'B' ; /* symbol C */ symbols1 [2] = 'C' ; /* symbol D */ symbols1 [3] = 'D' ; /* symbol E */ symbols1 [4.5] = 'E' ; /* Reading probabilities */ for I = 0; I < num of symbols; i++) /* Probability of symbol A */ probabilities1 I = 0.3; /* Probability of symbol B */ probabilities1 I = 0.25; /* Probability of symbol C */ probabilities1 [2.0] = 0.2; /* Probability of symbol D */ probabilities1 [3.5] = 0.15; /* Probability for E */ probabilities1 [4.5] = 0.1; /* Printing probabilities */ for I = printf("Probability = %g", probabilities1[i]); /* Freeing up memory */ free(symbols1); free(probabilities1); /* END OF MAIN FUNCTION */ #include "stdio.h" #include "stdlib.h" #include "string.h," "math.h," struct symbol = char letter; double probability; struct symbol *symbols = "A", 0.30, "B", 0.25, "C", 0.2, "D", 0.15, and "E", 0.1; double probabilities = "0.3,0.25,0.2,0.15,0.1"; char inputfile = "A B C D E 0.3 0.25 0.2 0.15 0.1"; int main(int argc, char** argv) int { for (j = I + 1; j < 5; j++) if I doesn't equal j), symbols [i].probability += probabilities [j]; printf("Final probabilities are: %%0.*%.*g", symbols [1].probability, symbols [2].probability, symbols [3].probability, symbols [4].probability); /* OUTPUT: Final probabilities are: 0.30 0.25 0.20 0.15 0.10 */ / CS50 Computer Science I, Harvard / Problem 5: Duet / 12/13/2015 #include stdio.h> #include string.h> #include math.h> struct symbol = char letter; double probability; struct symbol *symbols = "A", 0.30, "B", 0.25, "C", 0.2, "D", 0.15, and "E", 0.1; double probabilities = "0.3,0.25,0.2,0.15,0.1"; char inputfile = "A B C D E 0.3 0.25 0.2 0.15 0.1"; int main (int argc, char** argv) int { for (j = I + 1; j < 5; j++) { if I != j) symbols [i].probability += probabilities [j]; } } printf( "Final probabilities are: / Harvard's CS50 Computer Science I / Problem 6: Handheld device #include "stdio.h," #include "stdlib.h," #include "string.h," and #include "math.h." / I want to be able to just #include this file instead of having to type "include" for each function and structure. / The functions and structures are set up *after* the file is included. struct symbol = char letter; double probability; struct symbol *symbols[] = "A", 0.30, "B", 0.25, "C", 0.2, "D", 0.15, and "E", 0.1; double probabilities[] = "0.3,0.25,0.2,0.15,0.1"; char inputfile[] = "A B C D E 0.3 0.25 0.2 0.15 0.1"; int main(int argc, char** argv { cout << "Input file: "; cin >> input file; int I j; for I = 1; I < 5; i++) { for (j = I + 1; j < 5; j++) { if I != j) || (input file == inputfile)) symbols [i].probability += probabilities [j]; } } printf Here's how to finish the above task: #include the stdio.h file #include the unistd.h file int main(int argc, char ** argv), int num of symbols = 5; int * symbols1 = (int *) malloc((sizeof (int)) * num of symbols); double * probabilities1 = (double *) malloc((sizeof (double)) * num of symbols); char inputfile[] = "A B C D E 0.3 /* Reading symbols */ for I = 0; I num of symbols; i++) { /* symbol A */ symbols1 I = 'A' ; } /* symbol B */ symbols1 [1] = 'B' ; /* symbol C */ symbols1 [2] = 'C' ; /* symbol D */ symbols1 [3] = 'D' ; /* symbol E */ symbols1 [4.5] = 'E' ; / * Reading probabilities */ for I = 0; I < num of symbols; i++) /* Probability of symbol A */ probabilities1 I = 0.3; /* Probability of symbol B */ probabilities1 I = 0.25; /* Probability of symbol C */ probabilities1 [2.0] = 0.2; /* Probability of symbol D */ probabilities1 [3.5] = 0.15; /* Probability for E */ probabilities1 [4.5] = 0.1; / * Printing odds for I = 0, I num of symbols, and i++) printf("Probability = %g", probabilities1[i]); /* Freeing up memory */ free(symbols1); free(probabilities1); /* END OF MAIN FUNCTION */ #include "stdlib.h" and "stdio.h" #include the string.h file #include the math.h file struct symbol = char letter; double probability; struct symbol *symbols = "A", 0.30, "B", 0.25, "C", 0.2, "D", 0.15, and "E", 0.1; double probabilities = "0.3,0.25,0.2,0.15,0.1"; char inputfile = "A B C D E 0.3 0.25 0.2 0.15 0.1"; int main(int argc, char** argv) int { if I != j) symbols [i].probability += probabilities [j]; } } printf("The final probabilities are: %%0.*%.*g," symbols [1].probability, symbols [2].probability, symbols [3].probability, symbols [4].probability); / CS50 Computer Science I at Harvard / Problem 5: Duet / 12/13/2015 #include stdio.h> * OUTPUT: Final probabilities are: 0.30, 0.25, 0.20, 0.15, 0.10 #include the string.h file #include the math.h file struct symbol = char letter; double probability; struct symbol *symbols = "A", 0.30, "B", 0.25, "C", 0.2, "D", 0.15, and "E", 0.1; double probabilities = "0.3,0.25,0.2,0.15,0.1"; char inputfile = "A B C D E 0.3 0.25 0.2 0.15 0.1"; int main (int argc, char** argv) int { for (j = I + 1; j < 5; j++) { if I != j) symbols [i].probability += probabilities [j]; } } printf( "Final probabilities are: / Harvard's CS50 Computer Science I / Device you can hold in your hand #include "stdio.h," "stdlib.h," "string.h," and "math.h"; / I want to be able to just #include this file instead of having to type "include" for each function and structure. After the file is included, the functions and structures are set up. struct symbol = char letter; double probability; struct symbol *symbols = "A", 0.30, "B", 0.25, "C", 0.2, "D", 0.15, and "E", 0.1; double probabilities = "0.3,0.25,0.2,0.15,0.1"; char inputfile = "A B C D E 0.3 0.25 0.2 0.15 0.1"; int main(int argc, char** argv) cout input file; int I j; for I = 1; I < 5; i++) { for (j = I + 1; j < 5; j++) { if ((i != j) || (input_file == inputfile)) symbols [i]. probability += probabilities [j]; } } printf


Okay so from what I understand with the shannon stuff:
just calculate current x 0.5 + sum of previous probabilities.  Change that answer into binary
calc length which is the log2(1/probability) + 1 *rounds up, then boom you have the code 

ceiling(log2(1/p(x))) + 1

and we're working with one px (probability) index at a time
then whatever fx you got for that current index should be used to multiply by 2
and then if that computation is greater than 1, you subtract 1 and add 1 to the string output
if that computation is less than 1, you don't subtract anything and add 0 to the string output
if that computation is equal to 1, you stop there
you can put those operations in a for loop or while loop
and use the length to determine when to end the loop 


do it without threads

use a function that calculates  fbar, fbar binary length, and fbar binary

then run that function in a thread instead